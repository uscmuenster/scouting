name: Gesamtworkflow

on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * *'  # täglich um 04:00 Uhr UTC

permissions:
  contents: write

concurrency:
  group: html-report-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  update-and-build:
    name: Update statistics and build HTML report
    runs-on: ubuntu-latest

    steps:
      # --- 🔹 1. Repository auschecken
      - name: 🧩 Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # --- 🔹 2. Python einrichten
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # --- 🔹 3. Abhängigkeiten installieren
      - name: 📦 Install dependencies
        run: pip install -r requirements.txt

      # --- 🔹 4. Statistiken aktualisieren
      - name: 📊 Download latest VBL statistics PDFs
        env:
          PYTHONPATH: Scouting
        run: python Scouting/scripts/download_stats_pdfs.py

      - name: 🧮 Update USC stats overview
        env:
          PYTHONPATH: Scouting
        run: python Scouting/scripts/update_usc_stats_overview.py

      # --- 🔹 5. Änderungen committen (falls vorhanden)
      - name: 💾 Commit updated data
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/data/usc_stats_overview.json \
                  docs/data/hamburg_stats_overview.json \
                  docs/data/stats_pdfs/
          git commit -m "chore: update scouting statistics overviews" || echo "No changes"
          git push

      # --- 🔹 6. HTML-Seiten generieren
      - name: 🛠 Generate USC HTML report
        env:
          PYTHONPATH: Scouting
        run: |
          python -m scripts

          # Cache-Busting: Commit-Hash und Zeitstempel in HTML einfügen
          COMMIT_HASH=$(git rev-parse --short HEAD)
          for f in docs/*.html; do
            echo "<!-- Build $COMMIT_HASH $(date -u +"%Y-%m-%dT%H:%M:%SZ") -->" >> "$f"
          done

      # --- 🔹 7. Deployment auf gh-pages
      - name: 🚀 Deploy to gh-pages branch
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

          # 1️⃣ generierte Dateien sichern
          mkdir -p /tmp/ghpages
          cp -r docs/* /tmp/ghpages/

          # 2️⃣ neuen gh-pages-Branch erzeugen
          git fetch origin
          git checkout --orphan gh-pages
          git reset --hard
          rm -rf *

          # 3️⃣ gespeicherte Dateien zurückkopieren
          cp -r /tmp/ghpages/* .
          touch .nojekyll

          # 4️⃣ commit & push
          git add -A
          git commit -m "🚀 Deploy $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          git push -f origin gh-pages

      # --- 🔹 8. Erfolgsbestätigung
      - name: ✅ Confirm deploy success
        run: |
          echo "✅ Deployment erfolgreich abgeschlossen."
          echo "👉 https://${{ github.repository_owner }}.github.io/$(basename ${{ github.repository }})/"
